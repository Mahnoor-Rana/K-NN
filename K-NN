import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets, neighbors

from matplotlib.colors import ListedColormap
def knn_comparison(data, n_neighbors = 15):
    '''This function finds k-NN and plots the data.'''
    
    X = data[:, :2]
    y = data[:,2] 
        
        # grid cell size\n",
    h = .02
    cmap_light = ListedColormap(['#FFAAAA',  '#AAAAFF'])
    cmap_bold = ListedColormap(['#FF0000', '#0000FF'])
    
      # the core classifier: k-NN\n",
    clf = neighbors.KNeighborsClassifier(n_neighbors)
    clf.fit(X, y)
    
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
       
        # we create a mesh grid (x_min,y_min) to (x_max y_max) with 0.02 grid spaces\n",
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
        
        # we predict the value (either 0 or 1) of each element in the grid\n",
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
        
        # xx.ravel() will give a flatten array\n",
    
       # np.c_ : Translates slice objects to concatenation along the second axis.\n",
        # > np.c_[np.array([1,2,3]), np.array([4,5,6])]\n",
        # > array([[1, 4],\n",
        #          [2, 5],\n",
        #          [3, 6]])   (source: np.c_ documentation)\n",
       
        # convert the out back to the xx shape (we need it to plot the decission boundry)\n",
    Z = Z.reshape(xx.shape)
    
        # pcolormesh will plot the (xx,yy) grid with colors according to the values of Z\n",
        # it looks like decision boundry\n",
    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
       
        # scatter plot of with given points\n",
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold)
        
        #defining scale on both axises\n",
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
        # set the title\n",
    plt.title('K value = '+str(n_neighbors))
      
    plt.show()

data = np.genfromtxt('D:\datasets\overlap.csv', delimiter=',')
knn_comparison(data, 1)
knn_comparison(data, 5)
knn_comparison(data,15)
knn_comparison(data, 30)
knn_comparison(data, 50)

data = np.genfromtxt('D:\datasets\concertric.csv', delimiter=',')
knn_comparison(data, 1)
knn_comparison(data, 5)
knn_comparison(data,15)
knn_comparison(data, 30)
knn_comparison(data, 50)

data = np.genfromtxt('D:\datasets\outliers.csv', delimiter=',')
knn_comparison(data, 1)
knn_comparison(data, 5)
knn_comparison(data,15)
knn_comparison(data, 30)
knn_comparison(data, 50)

